<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
         http://www.springframework.org/schema/context  
         http://www.springframework.org/schema/context/spring-context-3.0.xsd  
         http://www.springframework.org/schema/tx  
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
         http://www.springframework.org/schema/aop   
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<context:component-scan base-package="com.hugnew.sps">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:server_config.properties</value>
                <value>classpath:sys_config.properties</value>
            </list>
        </property>
    </bean>

    <!-- 启动AspectJ支持 -->
    <aop:aspectj-autoproxy/>

    <!-- jedis客户端连接工厂 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>
        <property name="maxIdle"  value="${redis.pool.maxIdle}" />
        <property name="testOnBorrow"  value="${redis.pool.testOnBorrow}" />
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}" />
        <property name="port" value="${redis.port}" />
        <property name="usePool" value="true" />
        <property name="poolConfig" ref="jedisPoolConfig" />
        <property name="timeout" value="${redis.timeout}"/>
    </bean>
    <!-- redisTemplate模板 -->
    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer" />
    <bean id="jdkRedisSerializer"
          class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="KeySerializer" ref="stringRedisSerializer" />
        <property name="ValueSerializer" ref="stringRedisSerializer" />
        <property name="hashKeySerializer" ref="stringRedisSerializer"/>
        <property name="hashValueSerializer" ref="jdkRedisSerializer"/>
    </bean>

    <!--mysql datasource-->
    <bean id="dataSourceProxy" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${mysql.jdbc.url}" />
        <property name="username" value="${mysql.jdbc.username}" />
        <property name="password" value="${mysql.jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${mysql.jdbc.initialSize}" />
        <property name="minIdle" value="${mysql.jdbc.minIdle}" />
        <property name="maxActive" value="${mysql.jdbc.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${mysql.jdbc.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${mysql.jdbc.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${mysql.jdbc.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${mysql.jdbc.validationQuery}" />
        <property name="testWhileIdle" value="${mysql.jdbc.testWhileIdle}" />
        <property name="testOnBorrow" value="${mysql.jdbc.testOnBorrow}" />
        <property name="testOnReturn" value="${mysql.jdbc.testOnReturn}" />
        <property name="filters" value="${mysql.jdbc.filters}" />
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${mysql.jdbc.removeAbandoned}" />
        <!-- 7200秒，也就是两个小时 -->
        <property name="removeAbandonedTimeout" value="${mysql.jdbc.removeAbandonedTimeout}" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${mysql.jdbc.logAbandoned}" />
    </bean>

    <bean id="systemConfig" class="com.hugnew.core.common.constant.SystemConfig">
        <property name="guestUsername">
            <value>${shiro.guest.username}</value>
        </property>
    </bean>

    <!--事务管理DataSourceTransactionManager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceProxy" />
    </bean>
    <!-- mybatis session factory -->
    <bean id="sqlSessionFactory" class="com.hugnew.core.util.SqlSessionFactoryBeanUtil">
        <property name="configLocation" value="classpath:mybatis_config.xml" />
        <property name="dataSource" ref="dataSourceProxy" />
        <property name="mapperLocations" value="classpath*:com/hugnew/sps/dao/mapper/*.xml" />
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--以下方法，如save，update，insert等对数据库进行写入操作的方法，当产生Exception时进行回滚 -->
            <!--<tx:method name="*" propagation="REQUIRED" />-->
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="tx*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(public * com.hugnew.sps.services.*.*.*(..))" />
        <aop:pointcut id="subPointcut" expression="execution(public * com.hugnew.sps.services.*.*.*.*.*(..))" />
        <aop:pointcut id="basePointcut" expression="execution(public * com.hugnew.core.service.*.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="subPointcut" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="basePointcut" />
    </aop:config>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hugnew.sps.dao" />
	</bean>
</beans>